"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5073],{1639:(t,e,d)=>{d.r(e),d.d(e,{data:()=>o});const o={key:"v-0d536f23",path:"/spec/v0.6/protocol/functions.html",title:"Access Functions",lang:"en",frontmatter:{},excerpt:"",headers:[{level:2,title:"Protocol Modes",slug:"protocol-modes",children:[]},{level:2,title:"Requests",slug:"requests",children:[]},{level:2,title:"Responses",slug:"responses",children:[]},{level:2,title:"Desires and Reports",slug:"desires-and-reports",children:[]}],filePathRelative:"spec/v0.6/protocol/functions.md",git:{updatedTime:170759614e4}}},6251:(t,e,d)=>{d.r(e),d.d(e,{default:()=>v});var o=d(6252);const r=(0,o._)("h1",{id:"access-functions",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#access-functions","aria-hidden":"true"},"#"),(0,o.Uk)(" Access Functions")],-1),a=(0,o._)("h2",{id:"protocol-modes",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#protocol-modes","aria-hidden":"true"},"#"),(0,o.Uk)(" Protocol Modes")],-1),s=(0,o._)("p",null,"Similar to Modbus, the ThingSet protocol supports two different modes: A human-readable text mode and a binary mode.",-1),n=(0,o.Uk)("In the text mode, payload data is encoded in JSON format ("),i={href:"https://tools.ietf.org/html/rfc8259",target:"_blank",rel:"noopener noreferrer"},c=(0,o.Uk)("RFC 8259"),h=(0,o.Uk)("). This mode is recommended when using serial communication interfaces as the low layer protocol, as it can be easily used directly on a terminal."),l=(0,o.Uk)("The binary mode uses CBOR ("),u={href:"https://tools.ietf.org/html/rfc8949",target:"_blank",rel:"noopener noreferrer"},p=(0,o.Uk)("RFC 8949"),f=(0,o.Uk)(") instead of JSON for payload data encoding in order to reduce the protocol overhead for ressource-constrained devices or low bandwith communication via CAN or LoRa."),m=(0,o.uE)('<p>A device may implement both variants of the protocol, but it is also allowed to support only the mode most suitable for the application.</p><p>The first byte of a ThingSet message is either a text-mode identifier (<code>?</code>, <code>=</code>, <code>!</code>, <code>+</code>, <code>-</code>, <code>:</code>, <code>@</code> and <code>#</code>), a binary request code or a binary status code. Received data with unknown first byte is ignored, so that other text output (e.g. debug print information) can be used in parallel to the ThingSet protocol on the same serial interface.</p><h2 id="requests" tabindex="-1"><a class="header-anchor" href="#requests" aria-hidden="true">#</a> Requests</h2>',3),b=(0,o.Uk)("The protocol supports the typical "),g={href:"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete",target:"_blank",rel:"noopener noreferrer"},x=(0,o.Uk)("CRUD operations"),y=(0,o.Uk)(". Request codes match with CoAP to allow transparent mapping between ThingSet and CoAP devices."),T=(0,o.uE)('<table><thead><tr><th>Binary mode</th><th>Text mode</th><th>Function</th><th>CoAP equivalent</th><th>Description</th></tr></thead><tbody><tr><td>0x01</td><td>?</td><td>GET</td><td>GET</td><td>Retrieve all data from a path</td></tr><tr><td>0x05</td><td>?</td><td>FETCH</td><td>FETCH</td><td>Retrieve a part of the data from a path</td></tr><tr><td>0x07</td><td>=</td><td>UPDATE</td><td>iPATCH</td><td>Update (overwrite) data of a path</td></tr><tr><td>0x06</td><td>+</td><td>CREATE</td><td>PATCH</td><td>Append data to an object</td></tr><tr><td>0x04</td><td>-</td><td>DELETE</td><td>DELETE</td><td>Delete data from an object</td></tr><tr><td>0x02</td><td>!</td><td>EXEC</td><td>POST</td><td>Execute a function</td></tr></tbody></table><p>The CoAP PUT method is not explicitly implemented. PUT is equivalent to an update of all sub-objects of a resource using a PATCH request. UPDATE requests for ThingSet are always idempotent, so only the iPATCH request code is used. The PATCH method is used to create new data.</p><p>Additional request codes may be introduced in the future. Codes <code>0x0A</code>, <code>0x0D</code> and <code>0x20</code>-<code>0x7F</code> are reserved, as they represent the ASCII characters for readable text including <code>LF</code> and <code>CR</code>.</p><h2 id="responses" tabindex="-1"><a class="header-anchor" href="#responses" aria-hidden="true">#</a> Responses</h2><p>Response messages in binary format are identified by a first byte greater than or equal to 128 (<code>0x80</code>) containing a status code which shows if the request could be handled successfully. For status codes between <code>0x80</code> and <code>0x9F</code>, the response was successful. If the status code is greater than or equal to <code>0xA0</code>, an error occured.</p>',5),w=(0,o.Uk)("The status codes are again aligned with "),A={href:"https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#codes",target:"_blank",rel:"noopener noreferrer"},C=(0,o.Uk)("CoAP response codes"),E=(0,o.Uk)(", but contain an offset so that there is no interference with ASCII characters (less than 0x80)."),R=(0,o.uE)('<table><thead><tr><th>Code</th><th>CoAP</th><th>HTTP</th><th>Description</th><th>Comment</th></tr></thead><tbody><tr><td>0x81</td><td>2.01</td><td>201</td><td>Created</td><td>Answer to CREATE requests</td></tr><tr><td>0x82</td><td>2.02</td><td>204</td><td>Deleted</td><td>Answer to DELETE request</td></tr><tr><td>0x84</td><td>2.04</td><td>200/204</td><td>Changed</td><td>Answer to EXEC and UPDATE requests</td></tr><tr><td>0x85</td><td>2.05</td><td>200</td><td>Content</td><td>Answer to GET and FETCH requests</td></tr><tr><td>0xA0</td><td>4.00</td><td>400</td><td>Bad Request</td><td></td></tr><tr><td>0xA1</td><td>4.01</td><td>401</td><td>Unauthorized</td><td>Authentication needed</td></tr><tr><td>0xA3</td><td>4.03</td><td>403</td><td>Forbidden</td><td>Trying to write read-only value</td></tr><tr><td>0xA4</td><td>4.04</td><td>404</td><td>Not Found</td><td></td></tr><tr><td>0xA5</td><td>4.05</td><td>405</td><td>Method Not Allowed</td><td>If e.g. DELETE is not allowed for that object</td></tr><tr><td>0xA8</td><td>4.08</td><td>400</td><td>Request Entity Incomplete</td><td></td></tr><tr><td>0xA9</td><td>4.09</td><td>409</td><td>Conflict</td><td>Configuration conflicts with other settings</td></tr><tr><td>0xAD</td><td>4.13</td><td>413</td><td>Request Entity Too Large</td><td></td></tr><tr><td>0xAF</td><td>4.15</td><td>415</td><td>Unsupported Content-Format</td><td>If trying to assign a string to an int</td></tr><tr><td>0xC0</td><td>5.00</td><td>500</td><td>Internal Server Error</td><td>Generic catch-all response</td></tr><tr><td>0xC1</td><td>5.01</td><td>501</td><td>Not Implemented</td><td>Request method is not supported</td></tr><tr><td>0xC4</td><td>5.04</td><td>504</td><td>Gateway Timeout</td><td>Node cannot be reached through gateway</td></tr><tr><td>0xC5</td><td>5.05</td><td>505</td><td>Not a Gateway</td><td>Node is not a gateway and does not support absolute paths</td></tr></tbody></table><p>Responses text mode use the colon <code>:</code> as the first byte identifier, followed by the hexadecimal response code converted into a string without the <code>0x</code> prefix. The binary mode uses the code directly as the first byte.</p><h2 id="desires-and-reports" tabindex="-1"><a class="header-anchor" href="#desires-and-reports" aria-hidden="true">#</a> Desires and Reports</h2><p>Desires and reports are neither requests nor response messages, as they are sent without expecting a confirmation. Below table lists the message specifiers in text and binary mode.</p><table><thead><tr><th>Binary mode</th><th>Text mode</th><th>Description</th></tr></thead><tbody><tr><td>0x1D</td><td>@</td><td>Desire</td></tr><tr><td>0x1F</td><td>#</td><td>Report</td></tr></tbody></table><p>The overlay <code>_Reporting</code> is used to configure the device to publish certain data items on a regular basis through a defined communication channel (UART, CAN, LoRaWAN, etc.). If implemented in the firmware, the publication interval may be adjustable.</p><p>More details regarding the ThingSet protocol methods for data access will be explained in the next chapter.</p>',7),v={render:function(t,e){const d=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[r,a,s,(0,o._)("p",null,[n,(0,o._)("a",i,[c,(0,o.Wm)(d)]),h]),(0,o._)("p",null,[l,(0,o._)("a",u,[p,(0,o.Wm)(d)]),f]),m,(0,o._)("p",null,[b,(0,o._)("a",g,[x,(0,o.Wm)(d)]),y]),T,(0,o._)("p",null,[w,(0,o._)("a",A,[C,(0,o.Wm)(d)]),E]),R],64)}}}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4827],{9712:(e,t,n)=>{n.r(t),n.d(t,{data:()=>a});const a={key:"v-3d0bbece",path:"/spec/v0.5/appl_binary_mode.html",title:"Binary Mode",lang:"en",frontmatter:{},excerpt:"",headers:[{level:3,title:"Requests",slug:"requests",children:[]},{level:3,title:"Response",slug:"response",children:[]},{level:3,title:"Statement",slug:"statement",children:[]},{level:2,title:"Name and ID mapping",slug:"name-and-id-mapping",children:[]},{level:2,title:"Read data",slug:"read-data",children:[{level:3,title:"Using data object names",slug:"using-data-object-names",children:[]},{level:3,title:"Using data object IDs",slug:"using-data-object-ids",children:[]}]},{level:2,title:"Update data",slug:"update-data",children:[]},{level:2,title:"Create data",slug:"create-data",children:[]},{level:2,title:"Delete data",slug:"delete-data",children:[]},{level:2,title:"Execute function",slug:"execute-function",children:[]},{level:2,title:"Published statements",slug:"published-statements",children:[]}],filePathRelative:"spec/v0.5/appl_binary_mode.md",git:{updatedTime:1707227927e3}}},891:(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var a=n(6252);const o=(0,a.uE)('<h1 id="binary-mode" tabindex="-1"><a class="header-anchor" href="#binary-mode" aria-hidden="true">#</a> Binary Mode</h1><p>In the binary mode, the data is encoded using the CBOR format. The data structure is the same as in text mode, but numeric object IDs are used as identifiers by default instead of the object names.</p><p>The length of the entire request or response is not encoded in the ThingSet protocol, but can be determined from the CBOR format. Packet length as well as checksums should be encoded in lower layer protocols. It is assumed that the parser always receives a complete request.</p><p>The <strong>target</strong> of the binary mod is to work with as little payload data as possible. Hence, published statements only contain values and the corresponding IDs or names are only sent once at startup or can be requested manually later.</p><p>The <strong>main challenge</strong> is to still be fully discoverable via the binary mode without requiring previous knowledge of the data exposed by the device.</p><h3 id="requests" tabindex="-1"><a class="header-anchor" href="#requests" aria-hidden="true">#</a> Requests</h3><p>Each request message consists of a first byte as the request method identifier, a path or ID specifying the endpoint of the request and CBOR data as payload (if applicable).</p><pre><code>bin-request = bin-get / bin-post / bin-delete / bin-fetch / bin-ipatch\n\nbin-get    = %x01 endpoint\n\nbin-post   = %x02 endpoint cbor-data      ; exec or create is determined\n                                          ; based on data object type\n\nbin-delete = %x04 endpoint cbor-data\n\nbin-fetch  = %x05 endpoint ( cbor-array   ; IDs or names of requested data\n                           / %xF7 )       ; CBOR undefined: request array of\n                                          ; all IDs or names behind endpoint\n\nbin-ipatch = %x07 endpoint cbor-map\n\nendpoint   = path         ; CBOR string: path same as text mode\n           / parent-id    ; CBOR uint: parent object ID instead of path\n</code></pre><h3 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response</h3><p>Responses in binary mode start with the error/status code as specified before, followed by the data if applicable.</p><pre><code>bin-response = %x80-FF [ cbor-data ]      ; response code and data\n</code></pre><h3 id="statement" tabindex="-1"><a class="header-anchor" href="#statement" aria-hidden="true">#</a> Statement</h3><p>Binary publication messages follow the same concept as in text mode.</p><pre><code>bin-statement = %x1F endpoint cbor-map    ; map containing object IDs and values\n</code></pre><h2 id="name-and-id-mapping" tabindex="-1"><a class="header-anchor" href="#name-and-id-mapping" aria-hidden="true">#</a> Name and ID mapping</h2>',15),s=(0,a.Uk)("The examples in this chapter are based on the same data structure as introduced in the "),r=(0,a.Uk)("Data Structure chapter"),d=(0,a.Uk)(", but each object is identified by the ID stated in the comment."),i=(0,a.uE)('<p>The firmware developer is free to choose the IDs.</p><p>In contrast to the text mode, the binary mode has the special endpoints <code>&quot;_ids&quot;</code> (ID <code>0x16</code>) and <code>&quot;_paths&quot;</code> (ID <code>0x17</code>) that allow to retrieve the path for a given ID or vice versa using a <code>FETCH</code> request.</p><p><strong>Example 1:</strong> Request IDs of object paths <code>&quot;Bat/rMeas_V&quot;</code> and <code>&quot;Bat/rMeas_A&quot;</code></p><pre><code>Request:\n05                                      # FETCH request\n   16                                   # CBOR uint: 0x17 (_ids endpoint)\n   82                                   # CBOR array (2 elements)\n      6B 4261742F724D6561735F56         # CBOR string: &quot;Bat/rMeas_V&quot;\n      6B 4261742F724D6561735F41         # CBOR string: &quot;Bat/rMeas_A&quot;\n\nResponse:\n85                                      # Content.\n   82                                   # CBOR array (2 elements)\n      18 40                             # CBOR uint: 0x40 (object ID)\n      18 41                             # CBOR uint: 0x41 (object ID)\n</code></pre><p><strong>Example 2:</strong> Request paths of object IDs <code>0x40</code> and <code>0x41</code></p><pre><code>Request:\n05                                      # FETCH request\n   17                                   # CBOR uint: 0x17 (_paths endpoint)\n   82                                   # CBOR array (2 elements)\n      18 40                             # CBOR uint: 0x40 (object ID)\n      18 41                             # CBOR uint: 0x41 (object ID)\n\nResponse:\n85                                      # Content.\n   82                                   # CBOR array (2 elements)\n      6B 4261742F724D6561735F56         # CBOR string: &quot;Bat/rMeas_V&quot;\n      6B 4261742F724D6561735F41         # CBOR string: &quot;Bat/rMeas_A&quot;\n</code></pre><p><strong>Example 3:</strong> Request paths of object ID <code>0x70</code> (part of a record)</p><pre><code>Request:\n05                                      # FETCH request\n   17                                   # CBOR uint: 0x17 (_paths endpoint)\n   81                                   # CBOR array (1 element)\n      18 70                             # CBOR uint: 0x40 (object ID)\n\nResponse:\n85                                      # Content.\n   81                                   # CBOR array (1 element)\n      67 4C6F672F745F73                 # CBOR string: &quot;Log/t_s&quot;\n</code></pre><h2 id="read-data" tabindex="-1"><a class="header-anchor" href="#read-data" aria-hidden="true">#</a> Read data</h2><p>Similar to the text mode, the binary variants of the GET and FETCH functions also allow to read one or more data objects. The objects are identified by their parent object (endpoint of a path) and their IDs or their names.</p><p>With the GET function it is possible to retrieve all child objects of a resource as a map of key/value pairs.</p><p>The FETCH function can retrieve a specified subset of child item values. In addition to that, it can be used for device discovery, as it can list all childs of an object. Depending on the computing power and the network bandwidth, the childs can be requested as IDs or names.</p><h3 id="using-data-object-names" tabindex="-1"><a class="header-anchor" href="#using-data-object-names" aria-hidden="true">#</a> Using data object names</h3><p>If a path (string containing names) is used to specify an endpoint, also names are used instead of IDs in the returned results.</p><p><strong>Example 1:</strong> Retrieve all data of <code>Bat</code> path (names + values)</p><pre><code>Request:\n01                                      # GET\n   63 426174                            # CBOR string: &quot;Bat&quot;\n\nResponse:\n85                                      # Content.\n   A3                                   # CBOR map (3 elements)\n      67 724D6561735F56                 # CBOR string: &quot;rMeas_V&quot;\n      FA 414E6666                       # CBOR float: 12.9\n      67 724D6561735F41                 # CBOR string: &quot;rMeas_A&quot;\n      FA C048F5C3                       # CBOR float: -3.14\n      69 735461726765745F56             # CBOR string: &quot;sTarget_V&quot;\n      FA 41666666                       # CBOR float: 14.4\n</code></pre><p><strong>Example 2:</strong> Discover all child object names of the root object</p><pre><code>Request:\n05                                      # FETCH\n   60                                   # CBOR empty string (root object)\n   F7                                   # CBOR undefined as a wildcard\n\nResponse:\n85                                      # Content.\n   8B                                   # CBOR array (11 elements)\n      63 745F73                         # CBOR string: &quot;t_s&quot;\n      67 634E6F64654944                 # CBOR string: &quot;cNodeID&quot;\n       ...\n</code></pre><p><strong>Example 3:</strong> Retrieve value for single data item <code>Bat/rMeas_V</code></p><pre><code>Request:\n05                                      # FETCH\n   63 426174                            # CBOR string: &quot;Bat&quot; (path)\n   67 724D6561735F56                    # CBOR string: &quot;rMeas_V&quot; (object name)\n\nResponse:\n85                                      # Content.\n   FA 414E6666                          # CBOR float: 12.9\n</code></pre><h3 id="using-data-object-ids" tabindex="-1"><a class="header-anchor" href="#using-data-object-ids" aria-hidden="true">#</a> Using data object IDs</h3><p><strong>Example 4:</strong> Retrieve all data of meas path (IDs + values)</p><pre><code>Request:\n01                                      # GET\n   02                                   # CBOR uint: 0x02\n\nResponse:\n85                                      # Content.\n   A3                                   # CBOR map (3 elements)\n      18 40                             # CBOR uint: 0x40\n      FA 414E6666                       # CBOR float: 12.9\n      18 41                             # CBOR uint: 0x41\n      FA C048F5C3                       # CBOR float: -3.14\n      18 42                             # CBOR uint: 0x42\n      FA 41666666                       # CBOR float: 14.4\n</code></pre><p><strong>Example 5:</strong> Discover all child object IDs of the root object</p><pre><code>Request:\n05                                      # FETCH\n   00                                   # CBOR uint: 0x00 (root object)\n   F7                                   # CBOR undefined as a wildcard\n\nResponse:\n85                                      # Content.\n   8B                                   # CBOR array (11 elements)\n      01                                # CBOR uint: 0x10\n      18 1D                             # CBOR uint: 0x1D\n       ...\n</code></pre><p><strong>Example 6:</strong> Retrieve value for single data item <code>Bat_V</code> with ID <code>0x40</code></p><pre><code>Request:\n01                                      # GET\n   18 40                                # CBOR uint: 0x40 (object ID)\n\nResponse:\n85                                      # Content.\n   FA 414E6666                          # CBOR float: 12.9\n</code></pre><p><strong>Example 7:</strong> Retrieve multiple data items:</p><p>For fetching multiple data items, the IDs are provided in the array as the second argument. The endpoint (first argument) is redundant, as the ID already provides an unambiguous link to the data item, so it should be set to <code>0x00</code>.</p><pre><code>Request:\n05                                      # FETCH\n   00                                   # CBOR uint: 0x00 (root ID)\n   82                                   # CBOR array (2 elements)\n      18 40                             # CBOR uint: 0x40 (object ID)\n      18 41                             # CBOR uint: 0x41 (object ID)\n\nResponse:\n85                                      # Content.\n   82                                   # CBOR array (2 elements)\n      FA 414E6666                       # CBOR float: 12.9\n      FA C048F5C3                       # CBOR float: -3.14\n</code></pre><p><strong>Example 7:</strong> Retrieve number of records in <code>Log</code></p><p>If the endpoint is an array of records, fetching <code>undefined</code> for discovery returns the number of elements in the array (i.e. number of records) instead of the names or IDs as in case of groups as endpoint.</p><pre><code>Request:\n05                                      # FETCH\n   08                                   # CBOR uint: 0x08 (parent ID)\n   F7                                   # CBOR undefined as a wildcard\n\nResponse:\n85                                      # Content.\n   02                                   # CBOR uint: 0x02 (2 elements)\n</code></pre><p><strong>Example 8:</strong> Retrieve first record in <code>Log</code></p><p>Records are always returned as key/value maps, similar to GET requests for groups.</p><pre><code>Request:\n05                                      # FETCH\n   08                                   # CBOR uint: 0x08 (parent ID)\n   00                                   # CBOR uint: 0x00 (index)\n\nResponse:\n85                                      # Content.\n   A2                                   # CBOR map (2 elements)\n      18 70                             # CBOR uint: 0x70 (object ID)\n      1A 1B7561E0                       # CBOR uint: 460677600\n      18 71                             # CBOR uint: 0x71 (object ID)\n      19 0100                           # CBOR uint: 256\n</code></pre><p><strong>Example 9:</strong> Attempt to retrieve a single item from a record in <code>Log</code></p><p>As there can be multiple instances of the same record sharing the same IDs for their items, it&#39;s not possible to query a record item by ID.</p><pre><code>Request:\n05                                      # FETCH\n   00                                   # CBOR uint: 0x00 (root ID)\n   82                                   # CBOR array (2 elements)\n      18 70                             # CBOR uint: 0x70 (object ID)\n\nResponse:\nA4                                      # Not Found.\n</code></pre><h2 id="update-data" tabindex="-1"><a class="header-anchor" href="#update-data" aria-hidden="true">#</a> Update data</h2><p>Requests to overwrite the values of data items.</p><p>The device must support a patch request using the same CBOR data type as used in the response of a GET or FETCH request for the given objects. Optionally, the device may also accept different data types (e.g. float32 instead of int) and convert the data internally.</p><p>If the data type is not supported, an error status code (<code>0xAF</code>) is responded.</p><p><strong>Example 1:</strong> Disable load output</p><pre><code>Request:\n07                                      # PATCH\n   04                                   # CBOR uint: 0x04 (parent ID)\n   A1                                   # CBOR map (1 element)\n      18 60                             # CBOR uint: 0x60 (object ID)\n      F4                                # CBOR data: false\n\nResponse:\n84                                      # Changed.\n</code></pre><p><strong>Example 2:</strong> Attempt to write read-only measurement values</p><pre><code>Request:\n07                                      # PATCH\n   02                                   # CBOR uint: 0x02\n   A1                                   # CBOR map (1 element)\n      18 40                             # CBOR uint: 0x40\n      FA 41633333                       # CBOR float32: 14.2\n\nResponse:\nA3                                      # Forbidden.\n</code></pre><h2 id="create-data" tabindex="-1"><a class="header-anchor" href="#create-data" aria-hidden="true">#</a> Create data</h2><p>Appends new data to a data object in a similar way as in the text mode.</p><p><strong>Example 1:</strong> Add item with ID <code>0x41</code> (<code>Bat/rMeas_A</code>) to the generic metrics subset <code>m</code></p><pre><code>Request:\n02                                      # POST\n   07                                   # CBOR uint: 0x07 (subset object ID)\n   18 41                                # CBOR uint: 0x41\n\nResponse:\n81                                      # Created.\n</code></pre><h2 id="delete-data" tabindex="-1"><a class="header-anchor" href="#delete-data" aria-hidden="true">#</a> Delete data</h2><p>Removes data from an object of array type.</p><p><strong>Example 1:</strong> Delete item with ID <code>0x18</code> (<code>cMetadataURL</code>) from boot events subset</p><pre><code>Request:\n04                                      # DELETE\n   05                                   # CBOR uint: 0x05 (subset object ID)\n   18 18                                # CBOR uint: 0x18\n\nResponse:\n82                                      # Deleted.\n</code></pre><h2 id="execute-function" tabindex="-1"><a class="header-anchor" href="#execute-function" aria-hidden="true">#</a> Execute function</h2><p>For execution of a function, the same POST request is used as when creating data. The device decides based on the type of the endpoint whether the request is a function call or a request to create data.</p><p><strong>Example 1:</strong> Reset the device</p><pre><code>Request:\n02                                      # POST\n   18 34                                # CBOR uint: 0x34 (object ID)\n   80                                   # CBOR empty array\n\nResponse:\n83                                      # Valid.\n</code></pre><p>Note that the endpoint is the object of the executable function itself. Data can be passed to the called function as the second parameter, but the <code>Device/xReset</code> function does not require any parameters, so it receives an empty array.</p><h2 id="published-statements" tabindex="-1"><a class="header-anchor" href="#published-statements" aria-hidden="true">#</a> Published statements</h2><p>In contrast to text mode, published statements in binary mode only contain the values and not the corresponding names or IDs in order to reduce payload data as much as possible.</p><p><strong>Example 1:</strong> A statement containing the <code>m</code> subset, sent out by the device every 10 seconds</p><pre><code>1F\n   07                                   # CBOR uint: 0x07 (subset object ID)\n   85                                   # CBOR array (5 elements)\n      1A 1B7561E0                       # CBOR uint: 460677600\n      FA 414E6666                       # CBOR float: 12.9\n      FA C048F5C3                       # CBOR float: -3.14\n      FA 42C10000                       # CBOR float: 96.5\n      FA 43090000                       # CBOR float: 137.0\n</code></pre><p>The corresponding IDs can be retrieved with a fetch request.</p><p><strong>Example 2:</strong> Retrieve corresponding IDs for a received statement.</p><pre><code>Request:\n05                                      # FETCH\n   07                                   # CBOR uint: 0x07 (object ID)\n   F7                                   # CBOR undefined\n\nResponse:\n85                                      # Content.\n   85                                   # CBOR array (5 elements)\n      10                                # CBOR uint: 0x10 (object ID)\n      18 40                             # CBOR uint: 0x40 (object ID)\n      18 41                             # CBOR uint: 0x41 (object ID)\n      18 51                             # CBOR uint: 0x51 (object ID)\n      18 61                             # CBOR uint: 0x61 (object ID)\n</code></pre><p>If the name of the object is supplied instead of the ID, paths are returned in the response.</p><p><strong>Example 3:</strong> Retrieve corresponding names for a received statement.</p><pre><code>Request:\n05                                      # FETCH\n   61 6D                                # CBOR string: &quot;m&quot; (object path)\n   F7                                   # CBOR undefined\n\nResponse:\n85                                      # Content.\n   84                                   # CBOR array (4 elements)\n      63 745F73                         # CBOR string: &quot;t_s&quot; (object path)\n      6B 4261742F724D6561735F56         # CBOR string: &quot;Bat/rMeas_V&quot; (object path)\n      6B 4261742F724D6561735F41         # CBOR string: &quot;Bat/rMeas_A&quot; (object path)\n      69 536F6C61722F725F57             # CBOR string: &quot;Solar/r_W&quot; (object path)\n      68 4C6F61642F725F57               # CBOR string: &quot;Load/r_W&quot; (object path)\n</code></pre><p>If not all child nodes of one path fit into a single publication message (e.g. because the sizes of CAN and LoRa frames are limited to a few tens of bytes) the statement can be split. However, in this case the payload must contain the IDs together with the values, as otherwise the values cannot be mapped to the IDs anymore.</p><p><strong>Example 4:</strong> A statement containing a part of the <code>m</code> subset.</p><pre><code>1F\n   07                                   # CBOR uint: 0x07 (object ID)\n   A2                                   # CBOR map (2 elements)\n      18 40                             # CBOR uint: 0x40 (object ID)\n      FA 414E6666                       # CBOR float: 12.9\n      18 41                             # CBOR uint: 0x41 (object ID)\n      FA C048F5C3                       # CBOR float: -3.14\n</code></pre>',73),c={render:function(e,t){const n=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[o,(0,a._)("p",null,[s,(0,a.Wm)(n,{to:"/spec/v0.5/appl_data_structure.html#grouped-layout"},{default:(0,a.w5)((()=>[r])),_:1}),d]),i],64)}}}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3989],{5141:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-ef957b24",path:"/software/sdk.html",title:"ThingSet Zephyr SDK",lang:"en",frontmatter:{},excerpt:"",headers:[{level:2,title:"Example",slug:"example",children:[]}],filePathRelative:"software/sdk.md",git:{updatedTime:1686213394e3}}},5694:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var t=a(6252);const e=(0,t.uE)('<h1 id="thingset-zephyr-sdk" tabindex="-1"><a class="header-anchor" href="#thingset-zephyr-sdk" aria-hidden="true">#</a> ThingSet Zephyr SDK</h1><p>The ThingSet software development (SDK) for Zephyr leverages the Zephyr RTOS APIs to provide ready-to-use implementations for the following interfaces:</p><ul><li>Serial (UART or USB CDC-ACM)</li><li>CAN</li><li>Bluetooth</li><li>LoRaWAN</li><li>Flash or EEPROM (for non-volatile data storage)</li></ul><p>Further interfaces like MQTT and WebSocket over WiFi are currently under development.</p><p>The ThingSet device library is used internally for data processing.</p>',5),p=(0,t._)("strong",null,"Source repository:",-1),o=(0,t.Uk)(),c={href:"https://github.com/ThingSet/thingset-zephyr-sdk",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("ThingSet/thingset-zephyr-sdk"),i=(0,t.uE)('<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>First of all, the ThingSet library and an interface provided by the ThingSet SDK have to be enabled via Kconfig in the <code>prj.conf</code>. This example uses the serial interface:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token assign-left variable">CONFIG_SERIAL</span><span class="token operator">=</span>y\n<span class="token assign-left variable">CONFIG_UART_INTERRUPT_DRIVEN</span><span class="token operator">=</span>y\n\n<span class="token assign-left variable">CONFIG_THINGSET</span><span class="token operator">=</span>y\n<span class="token assign-left variable">CONFIG_THINGSET_SERIAL</span><span class="token operator">=</span>y\n</code></pre></div><p>Afterwards, exposing data via ThingSet just needs very few lines of code:</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thingset/sdk.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;zephyr/kernel.h&gt;</span></span>\n\n<span class="token comment">/* local variables/functions to be exposed via ThingSet */</span>\n<span class="token keyword">char</span> node_id<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;ABCD1234&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> room_temp <span class="token operator">=</span> <span class="token number">18.3</span><span class="token punctuation">;</span>\n<span class="token keyword">float</span> target_temp <span class="token operator">=</span> <span class="token number">21.0</span><span class="token punctuation">;</span>\nbool heater_on <span class="token operator">=</span> true<span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* ThingSet object definitions (based on Zephyr&#39;s iterable sections feature) */</span>\n<span class="token function">TS_ADD_ITEM_STRING</span><span class="token punctuation">(</span><span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token string">&quot;cNodeID&quot;</span><span class="token punctuation">,</span> node_id<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>node_id<span class="token punctuation">)</span><span class="token punctuation">,</span> TS_ID_ROOT<span class="token punctuation">,</span> TS_ANY_R<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">TS_ADD_ITEM_FLOAT</span><span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token string">&quot;rRoomTemp_degC&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>room_temp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TS_ID_ROOT<span class="token punctuation">,</span> TS_ANY_R<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">TS_ADD_ITEM_FLOAT</span><span class="token punctuation">(</span><span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token string">&quot;wTargetTemp_degC&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_temp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TS_ID_ROOT<span class="token punctuation">,</span> TS_ANY_RW<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">TS_ADD_ITEM_BOOL</span><span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token string">&quot;rHeaterOn&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>heater_on<span class="token punctuation">,</span> TS_ID_ROOT<span class="token punctuation">,</span> TS_ANY_R<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">TS_ADD_FN_VOID</span><span class="token punctuation">(</span><span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token string">&quot;xReset&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reset<span class="token punctuation">,</span> TS_ID_ROOT<span class="token punctuation">,</span> TS_ANY_RW<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Reset function called!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/*\n     * Implement your application code here (e.g. controlling of the heater).\n     *\n     * ThingSet requests are automatically handled by the SDK in the background.\n     */</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',5),u=(0,t.Uk)("The "),r=(0,t._)("code",null,"TS_ADD_*",-1),k=(0,t.Uk)(" macros use Zephyr's "),d={href:"https://docs.zephyrproject.org/latest/kernel/iterable_sections/index.html",target:"_blank",rel:"noopener noreferrer"},h=(0,t.Uk)("Iterable Sections"),_=(0,t.Uk)(" internally. They can be used anywhere in the code to add data items to the global ThingSet database."),g=(0,t._)("p",null,"The actual processing of the data through the serial interface happens in a dedicated thread in the background. You can fully focus on your application development.",-1),T=(0,t._)("p",null,[(0,t.Uk)("If the used board supports Bluetooth, a simple "),(0,t._)("code",null,"CONFIG_THINGSET_BLE=y"),(0,t.Uk)(" would also make the data available via Bluetooth (in addition to the serial interface).")],-1),m={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,o,(0,t._)("a",c,[l,(0,t.Wm)(a)])]),i,(0,t._)("p",null,[u,r,k,(0,t._)("a",d,[h,(0,t.Wm)(a)]),_]),g,T],64)}}}}]);